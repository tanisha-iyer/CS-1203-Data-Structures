// Insertion Sort 
#include <stdio.h>

void insertionsort(int arr[], int n) {
    int i, j, key;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

int main() {
    int arr[] = {40, 37, 10, 55, 21};
    int n = 5;
    printf("Original array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
    
    insertionsort(arr, n);

    printf("Sorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}

// Bubble Sort 
#include <stdio.h>

void swap(int *xp, int *yp) {
    int temp;
    temp = *xp; // pointers used to access the values of integers 
    *xp = *yp;
    *yp = temp;
}

void printArray(int arr[], int size) { // display elements of an int array 
    int i; // used to iterate through code 
    for (i = 0; i < size; i++) 
        printf("%d ", arr[i]); // prints the ith element of array 
    printf("\n"); //goes through each int and prints it 
}

void bubbleSort(int arr[], int n) {
    int i, j, flag, comparisonCnt = 0, swapCnt = 0;      // i and j are loop counters 
    for (i = 0; i < n - 1; i++) {
        flag = 0;                // used to indicate if any swaps are made during pass of the arr
        for (j = 0; j < n - i - 1; j++) {
            comparisonCnt++;          // keeps track of comparisons during sorting 
            if (arr[j] > arr[j + 1]) {
                swap(&arr[j], &arr[j + 1]);
                flag = 1;            // indicates that arr is not sorted 
                swapCnt++;
            }
        }
        if (flag == 0)        // no swaps needed to be made 
            break;
    }
}

int main() {       // main execution 
    int n = 7;    // number of int in array 
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    bubbleSort(arr, n);
    printArray(arr, n);
    return 0;
}
