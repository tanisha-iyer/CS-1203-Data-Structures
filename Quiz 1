#include <stdio.h>

int comparisons = 0;
int swaps = 0;

// Function to print the array
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Function to swap two elements and count swaps
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
    swaps++;
}

void count() { // tracking comparisons and swaps in heapify 
    comparisons = 0;
    swaps = 0;
}

// Function for heapify
void heapify(int arr[], int n, int i) {
    int largest, left, right;
    while (1) {
        left = 2 * i + 1; // left child node 
        right = 2 * i + 2; // right child node
        largest = i;
        if (left < n) {
            comparisons++;
            if (arr[left] > arr[largest])
                largest = left;
        }

        if (right < n) {
            comparisons++;
            if (arr[right] > arr[largest])
                largest = right;
        }
        if (largest != i) {
            swap(&arr[i], &arr[largest]);
            i = largest;
        } else {
            break;
        }
    }
}

// Function for heapInsert
void heapInsert(int arr[], int n, int elm) {
    int i, parent;
    arr[n] = elm;
    i = n;

    if (i == 0)
        return;
    while (i != 0) {
        parent = (i - 1) / 2;
        comparisons++;
        if (arr[parent] < arr[i]) {
            swap(&arr[i], &arr[parent]);
        } else {
            break;
        }
        i = parent;
    }
}

int main() {
    int arr1[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    int arr2[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    int n = 10;
    count(); // Reset counters before using them

    printArray(arr1, n);
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr1, n, i);
    printf("comparisons - %d, swaps - %d\n", comparisons, swaps);

    count(); // Reset counters before using them

    printArray(arr2, n);
    for (int i = 0; i < n; i++) {
        heapInsert(arr2, i, arr2[i]);
    }
    printf("comparisons - %d, swaps - %d\n", comparisons, swaps);
    return 0;
}
