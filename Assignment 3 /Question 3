// Merge Sort 
#include <stdio.h> 
#include <stdlib.h> 

#define ARRSIZE 4;
int cp1, cmp1;

void merge(int arr[], int l, int m, int r) { 
    int i, j, k; 
    int n1 = m - l + 1; 
    int n2 = r - m; 
  
  // temp arrays 
    int L[n1], R[n2]; 
  
    for (i = 0; i < n1; i++){
        L[i] = arr[l + i]; 
	cp1++;
    }
    for (j = 0; j < n2; j++){
        R[j] = arr[m + 1 + j];
	cp1++;
    } 

    i = 0; 
    j = 0; 
    k = l; // Initial index of merged subarray 
    while (i < n1 && j < n2) { 
	cmp1++;
        if (L[i] <= R[j]) { 
            arr[k] = L[i]; 
            i++; 
        } 
        else { 
            arr[k] = R[j]; 
            j++; 
        } 
        k++; 
    } 

    while (i < n1){ 
        arr[k] = L[i]; 
        i++; 
        k++; 
        cp1++;
    } 
    while (j < n2) { 
        arr[k] = R[j]; 
        j++; 
        k++; 
        cp1++;
    } 
} 
void mergeSort(int arr[], int l, int r) 
{ 
    if (l < r) { 
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m); 
        mergeSort(arr, m + 1, r); 
  
        merge(arr, l, m, r); 
    } 
} 
  
void printArray(int A[], int size) 
{ 
    int i; 
    for (i = 0; i < size; i++) 
        printf("%d ", A[i]); 
    printf("\n"); 
} 
  
int main() 
{ 
    int size = ARRSIZE; 
    int arr[] = {7, 6, 9, 12}; 
    cp1 = 0; cmp1 = 0;
  
    printf("Original array: \n"); 
    printArray(arr, size); 

    mergeSort(arr, 0, size - 1); 
  
    printf("\nSorted array: \n"); 
    printArray(arr, size); 
    printf("copies %d, comparisons %d\n", cp1, cmp1);
    return 0; 
}

// Quick Sort 
#include <stdio.h>  
#define ARRSIZE 12

int swpcnt, cmpcnt;
// Function to swap two elements  
void swap(int* xy, int* yp) {  
    int temp = *xy;  
    *xy = *yp;  
    *yp = temp;  
    swpcnt++;
}  

int partition(int arr[], int low, int high) {  
    int pivot = arr[high];  
    int i = (low - 1);  
  
    for (int j = low; j <= high - 1; j++) {  
        cmpcnt++;
        if (arr[j] < pivot) {  
            i++;  
            swap(&arr[i], &arr[j]);  
        }  
    }  
    swap(&arr[i + 1], &arr[high]);  
    return (i + 1);  
}
  
void quickSort(int arr[], int low, int high) {  
    if (low < high) {  
        int pi = partition(arr, low, high);  
        quickSort(arr, low, pi - 1);  
        quickSort(arr, pi + 1, high);  
    }  
}  
  
// Function to print the array  
void printArray(int arr[], int size) {  
    int i;  
    for (i = 0; i < size; i++)  
        printf("%d ", arr[i]);  
    printf("\n");  
}  
  
int main(){  
int arr[] = {5, 77, 9, 28, 12, 11, 31, 5, 8, 23, 3, 17};
    int n = ARRSIZE;  

    swpcnt = 0; cmpcnt = 0;

    printf("Unsorted array: \n");  
    printArray(arr, n);  
    
    quickSort(arr, 0, n - 1);  
    printf("Sorted array: \n");  
    printArray(arr, n);  
    printf("swaps %d comparisons %d\n", swpcnt, cmpcnt);
    return 0;  
}  

// Heap Sort 
#include <stdio.h>
#define ARRSIZE 5;
void swap(int* xp, int* yp) {
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void heapify(int arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        swap(&arr[i], &arr[largest]);
        heapify(arr, n, largest);
    }
}

void heapSort(int arr[], int n) {
    // for max heap
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    // Extract each element
    for (int i = n - 1; i > 0; i--) {
        swap(&arr[0], &arr[i]); 
        heapify(arr, i, 0);     
    }
}

void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int arr[] = {12, 11, 13, 5, 7};
    int n = ARRSIZE;
    
    printf("Original array: ");
    printArray(arr, n);

    heapSort(arr, n);
    printf("Sorted array: ");
    printArray(arr, n);

    return 0;
}
