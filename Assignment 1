#include <stdio.h>
#include <stdlib.h>

// implement a queue data structure 
typedef struct node {
    int data; // where you store the actual value associated with the node.
    struct node* next; // This is a pointer to the next node in the queue. 
} NODE;

typedef struct queue {
    NODE* front; 
    NODE* rear;
} QUEUE;

// functions for insert, delete and print
void insert(QUEUE* q, int elm);
int delete(QUEUE* q);
void printQueue(QUEUE q);

// this is used to insert an element into the queue represented by the QUEUE structure q
void insert(QUEUE* q, int elm) {

}

// Function to delete an element from the queue and return its value
int delete(QUEUE* q) {
    // Implement deletion logic here
    return 0; // Placeholder return value
}

// Function to print the contents of the queue
void printQueue(QUEUE q) {
    // Implement print logic here
}

int main() {
    QUEUE q;
    q.front = q.rear = NULL;
    int elm, menu;

    while (1) {
        printf("0. exit, 1. initialize, 2. delete, 3. insert, 4. print. Input Choice: ");
        scanf("%d", &menu); // accepts input

        switch (menu) {
            case 0:
                exit(0); // This exits the program 
            case 1:
                q.front = q.rear = NULL; // creating empty queue, no elements
                break;
            case 2:
                printf("Popped Value %d\n", delete(&q)); // deletes element from queue
                break; 
            case 3:
                printf("Give element: "); 
                scanf("%d", &elm);
                insert(&q, elm); // inserts an element into the queue
                break;
            case 4:
                printQueue(q); // prints the elements of the queue
                break;
            default:
                printf("Wrong Choice\n"); // when the menu is presented and the user inputs an invalid choice, this will be printed
        }
    }

    return 0;
}

// Time complexity: O(n) where n is the number of elements in the queue
// Space Complexity: O(n) space complexity. This n is for the memory used by the linked list nodes to store elements.
